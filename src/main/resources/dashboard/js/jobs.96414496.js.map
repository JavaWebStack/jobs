{"version":3,"file":"js/jobs.96414496.js","mappings":"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","sources":["webpack://dashboard/./src/views/jobs/Jobs.vue","webpack://dashboard/./src/components/JobCreator.vue","webpack://dashboard/./src/components/JobCreator.vue?e0b9","webpack://dashboard/./src/views/jobs/Jobs.vue?ffc9"],"sourcesContent":["<template>\n    <div>\n        <h2>Jobs</h2>\n        <bs-tab :tabs=\"Object.keys(statuses).map(k => ({ key: k, text: statuses[k] }))\" v-model=\"tab\">\n            <template v-slot:[`item`]=\"{ item }\">\n                <i class=\"bi\" :class=\"{ ['bi-' + jobIcons[item.key]]: true }\" style=\"margin-right: 10px;\"></i>\n                {{ item.text }}\n                <span class=\"badge rounded-pill\"\n                      :class=\"{ [item.key === tab ? 'text-bg-primary' : 'text-bg-dark']: true }\"\n                      style=\"margin-left: 10px;\">{{ jobCounts[item.key] }}</span>\n            </template>\n        </bs-tab>\n        <div v-for=\"status in Object.keys(statuses)\" :key=\"status\"\n             :style=\"{ display: status === tab ? 'block' : 'none' }\">\n            <bs-table :headers=\"[\n                { key: 'bulk', text: '' },\n                { key: 'id', text: 'ID' },\n                { key: 'type', text: 'Type' },\n                { key: 'created_at', text: 'Created At' }\n            ]\" :items=\"jobs\">\n                <template v-slot:[`header.bulk`]>\n                    <input type=\"checkbox\" class=\"form-check\" v-model=\"checkAll\"\n                           @input=\"e => toggleCheckAll(e.target.checked)\">\n                </template>\n                <template v-slot:[`item.bulk`]=\"{ item }\">\n                    <input type=\"checkbox\" class=\"form-check\" v-model=\"checked[item.id]\"\n                           @input=\"e => toggleChecked(item.id, e.target.checked)\">\n                </template>\n                <template v-slot:[`item.id`]=\"{ item }\">\n                    <router-link :to=\"{ name: 'job', params: { id: item.id } }\">{{ item.id }}</router-link>\n                </template>\n            </bs-table>\n        </div>\n        <job-creator ref=\"jobCreator\" @created=\"this.fetchJobCounts()\" :scheduled=\"tab === 'SCHEDULED'\" />\n        <button class=\"btn btn-primary\" @click=\"$refs.jobCreator.show()\" v-if=\"['ENQUEUED', 'SCHEDULED'].includes(tab)\">Create Job</button>\n        <div class=\"float-end\">\n            <nav>\n                <ul class=\"pagination\">\n                    <li class=\"page-item\">\n                        <a class=\"page-link\" @click=\"prevPage()\" style=\"cursor: pointer; user-select: none;\">\n                            <span aria-hidden=\"true\">&laquo;</span>\n                        </a>\n                    </li>\n                    <li class=\"page-item\"><a class=\"page-link\">{{ page }}</a></li>\n                    <li class=\"page-item\">\n                        <a class=\"page-link\" @click=\"nextPage()\" style=\"cursor: pointer; user-select: none;\">\n                            <span aria-hidden=\"true\">&raquo;</span>\n                        </a>\n                    </li>\n                </ul>\n            </nav>\n        </div>\n    </div>\n</template>\n\n<script>\nimport BsTable from \"@/components/BSTable\";\nimport api from \"@/api\";\nimport BsTab from \"@/components/BSTab\";\nimport JobCreator from \"@/components/JobCreator\";\n\nexport default {\n    name: \"Jobs\",\n    data() {\n        return {\n            statuses: {\n                'SCHEDULED': 'Scheduled',\n                'ENQUEUED': 'Enqueued',\n                'PROCESSING': 'Processing',\n                'SUCCESS': 'Succeeded',\n                'FAILED': 'Failed'\n            },\n            tab: this.$route.query.status || 'SCHEDULED',\n            jobs: [],\n            jobCounts: {\n                SCHEDULED: 0,\n                ENQUEUED: 0,\n                PROCESSING: 0,\n                SUCCESS: 0,\n                FAILED: 0\n            },\n            jobIcons: {\n                SCHEDULED: 'clock',\n                ENQUEUED: 'hourglass',\n                PROCESSING: 'gear',\n                SUCCESS: 'check-circle',\n                FAILED: 'exclamation-circle'\n            },\n            page: 1,\n            checkAll: false,\n            checked: {},\n            countTimer: undefined\n        }\n    },\n    created() {\n        this.fetchJobs()\n        this.fetchJobCounts()\n        this.countTimer = setInterval(this.fetchJobCounts, 3000)\n    },\n    beforeUnmount() {\n        clearInterval(this.countTimer)\n    },\n    watch: {\n        tab() {\n            this.page = 1\n            this.fetchJobs()\n            this.$router.replace({ query: { status: this.tab }})\n        }\n    },\n    methods: {\n        spawnJob(queue, schedule_at, type, payload) {\n            api.post('/jobs', {\n                queue,\n                schedule_at: schedule_at || undefined,\n                type,\n                payload\n            }).then(() => {\n                this.fetchJobs()\n                this.fetchJobCounts()\n            })\n        },\n        nextPage() {\n            this.page++;\n            this.fetchJobs();\n        },\n        prevPage() {\n            if(this.page === 1)\n                return;\n            this.page--;\n            this.fetchJobs();\n        },\n        fetchJobs() {\n            this.jobs = []\n            api.get('/jobs', {params: {status: this.tab, page: this.page}}).then(res => {\n                this.checkAll = false\n                this.checked = {}\n                this.jobs = res.data.data\n            })\n        },\n        fetchJobCounts() {\n            api.get('/status/job-counts').then(res => {\n                if (this.jobCounts[this.tab] !== res.data.data[this.tab]) {\n                    this.fetchJobs();\n                }\n                this.jobCounts = res.data.data\n            })\n        },\n        toggleChecked(id, value) {\n            this.checked[id] = value\n            this.checkAll = this.jobs.reduce((c, v) => c && this.checked[v.id], true)\n        },\n        toggleCheckAll(value) {\n            if (value) {\n                this.checkAll = true\n                this.jobs.forEach(j => this.checked[j.id] = true)\n            } else {\n                this.checkAll = false\n                this.checked = {}\n            }\n        }\n    },\n    components: {JobCreator, BsTab, BsTable}\n}\n</script>\n\n<style scoped>\n\n</style>","<template>\n  <div>\n    <bs-modal v-model=\"open\" @cancel=\"resetForm()\" @ok=\"createJob()\" title=\"Create Job\" size=\"lg\" ok-text=\"Create\">\n      <bs-select v-model=\"queue\" :options=\"queues\">Queue</bs-select>\n      <bs-select v-model=\"type\" :options=\"types\" class=\"mt-2\">Type</bs-select>\n      <bs-input type=\"datetime-local\" v-model=\"scheduleAt\" v-if=\"scheduled\" class=\"mt-2\">Schedule At</bs-input>\n      <div class=\"form-group mt-2\">\n        <label class=\"form-label\">Payload</label>\n        <textarea class=\"form-control\" v-model=\"payload\" rows=\"7\" />\n      </div>\n    </bs-modal>\n  </div>\n</template>\n\n<script>\nimport api from \"@/api\";\nimport BsInput from \"@/components/BSInput\";\n\nexport default {\n  name: \"JobCreator\",\n    components: {BsInput},\n    data() {\n    return {\n      open: false,\n      types: [],\n      queues: [],\n      queue: '',\n      type: '',\n      scheduleAt: '',\n      payload: '{}'\n    }\n  },\n  props: {\n    scheduled: {\n      type: Boolean,\n      default: false\n    }\n  },\n  created() {\n    this.fetchTypesAndQueues();\n  },\n    watch: {\n      scheduleAt(val) {\n          console.log(val)\n      }\n    },\n  methods: {\n    fetchTypesAndQueues() {\n      api.get('/status/job-types').then(res => this.types = res.data.data)\n      api.get('/workers').then(res => {\n        this.queues = res.data.data.reduce((c, v) => {\n          if(!c.includes(v.queue))\n            c.push(v.queue)\n          return c\n        }, [])\n      })\n    },\n    show() {\n      this.open = true\n    },\n    resetForm() {\n      this.queue = ''\n      this.type = ''\n      this.scheduleAt = ''\n      this.payload = ''\n    },\n    formatDate(date) {\n      return date.replace('T', ' ') + ':00'\n    },\n    createJob() {\n      api.post('/jobs', {\n        queue: this.queue,\n        type: this.type,\n        schedule_at: this.scheduled ? this.formatDate(this.scheduleAt) : undefined,\n        payload: JSON.parse(this.payload)\n      }).then(res => this.$emit('created', res.data.data))\n    }\n  }\n}\n</script>\n\n<style scoped>\n\n</style>","import { render } from \"./JobCreator.vue?vue&type=template&id=db389e1c\"\nimport script from \"./JobCreator.vue?vue&type=script&lang=js\"\nexport * from \"./JobCreator.vue?vue&type=script&lang=js\"\n\nimport exportComponent from \"/Users/jake/Documents/Coding/JavaWebStack/jobs/dashboard/node_modules/vue-loader/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__","import { render } from \"./Jobs.vue?vue&type=template&id=4313538d\"\nimport script from \"./Jobs.vue?vue&type=script&lang=js\"\nexport * from \"./Jobs.vue?vue&type=script&lang=js\"\n\nimport exportComponent from \"/Users/jake/Documents/Coding/JavaWebStack/jobs/dashboard/node_modules/vue-loader/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__"],"names":["_createElementVNode","class","_hoisted_6","_hoisted_11","_createElementBlock","_hoisted_1","_createVNode","_component_bs_tab","tabs","Object","keys","$data","map","k","key","text","$event","_withCtx","item","style","_toDisplayString","_Fragment","_renderList","status","display","_component_bs_table","headers","items","type","onInput","e","$options","target","checked","id","_component_router_link","to","name","params","_component_job_creator","ref","onCreated","fetchJobCounts","scheduled","includes","onClick","_ctx","jobCreator","show","_component_bs_modal","onCancel","onOk","title","size","_component_bs_select","options","$props","_createBlock","_component_bs_input","_hoisted_5","rows","components","BsInput","data","open","types","queues","queue","scheduleAt","payload","props","Boolean","default","created","this","fetchTypesAndQueues","watch","val","console","log","methods","api","then","res","reduce","c","v","push","resetForm","formatDate","date","replace","createJob","schedule_at","undefined","JSON","parse","$emit","__exports__","statuses","tab","$route","query","jobs","jobCounts","SCHEDULED","ENQUEUED","PROCESSING","SUCCESS","FAILED","jobIcons","page","checkAll","countTimer","fetchJobs","setInterval","beforeUnmount","clearInterval","$router","spawnJob","nextPage","prevPage","toggleChecked","value","toggleCheckAll","forEach","j","JobCreator","BsTab","BsTable","render"],"sourceRoot":""}